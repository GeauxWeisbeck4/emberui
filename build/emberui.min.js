/*! emberui 2013-10-29 3:10:53 */
EmberUI = Ember.Namespace.create(), EmberUI.Register = Ember.Mixin.create({
    setupComponents: function() {
        this.EuiButtonComponent = EmberUI.EuiButtonComponent, this.EuiDropbuttonComponent = EmberUI.EuiDropbuttonComponent;
    }.on("init")
}), EmberUI.EuiButtonComponent = Ember.Component.extend({
    tagName: "button",
    classNameBindings: [ ":eui-button", "computedSize", "computedType", "loading:eui-loading", "icon:eui-icon", "label::eui-no-label", "class" ],
    attributeBindings: [ "isDisabled:disabled" ],
    label: null,
    type: null,
    size: null,
    icon: null,
    trailingIcon: null,
    loading: null,
    disabled: null,
    action: null,
    "class": null,
    computedSize: function() {
        return "eui-" + (this.get("size") || "medium");
    }.property("size"),
    computedType: function() {
        return "eui-" + (this.get("type") || "secondary");
    }.property("type"),
    isDisabled: function() {
        return this.get("disabled") || this.get("loading") ? !0 : void 0;
    }.property("disabled", "loading"),
    click: function() {
        this.sendAction();
    }
}), EmberUI.EuiDropbuttonComponent = Ember.Component.extend({
    tagName: "div",
    classNameBindings: [ "primaryAction:eui-groupbutton:eui-singlebutton" ],
    primaryAction: function() {
        var a = this.get("action").findBy("primary", !0);
        return a ? a : !1;
    }.property("action"),
    actions: {
        toggleWindow: function() {
            console.log("TODO: open window with list of actions");
        },
        primaryAction: function() {
            this.sendAction("primaryAction.action");
        }
    }
}), this.Ember = this.Ember || {}, this.Ember.TEMPLATES = this.Ember.TEMPLATES || {}, 
this.Ember.TEMPLATES["components/eui-button"] = Ember.Handlebars.template(function(a, b, c, d, e) {
    function f(a, b) {
        var d, e, f, g, h = "";
        return b.buffer.push("\n      <b "), e = {
            "class": a
        }, f = {
            "class": "STRING"
        }, g = {
            hash: {
                "class": "icon"
            },
            contexts: [],
            types: [],
            hashContexts: e,
            hashTypes: f,
            data: b
        }, b.buffer.push(n((d = c["bind-attr"] || a["bind-attr"], d ? d.call(a, g) : m.call(a, "bind-attr", g)))), 
        b.buffer.push("></b>\n    "), h;
    }
    function g(a, b) {
        var d, e, f, g, h = "";
        return b.buffer.push("\n      <b "), e = {
            "class": a
        }, f = {
            "class": "STRING"
        }, g = {
            hash: {
                "class": "trailingIcon"
            },
            contexts: [],
            types: [],
            hashContexts: e,
            hashTypes: f,
            data: b
        }, b.buffer.push(n((d = c["bind-attr"] || a["bind-attr"], d ? d.call(a, g) : m.call(a, "bind-attr", g)))), 
        b.buffer.push("></b>\n    "), h;
    }
    function h(a, b) {
        b.buffer.push('\n    <ul class="eui-loading-animation">\n      <li></li>\n      <li></li>\n      <li></li>\n    </ul>\n  ');
    }
    this.compilerInfo = [ 4, ">= 1.0.0" ], c = this.merge(c, Ember.Handlebars.helpers), 
    e = e || {};
    var i, j, k, l = "", m = c.helperMissing, n = this.escapeExpression, o = this;
    return e.buffer.push('<div class="eui-wrapper">\n  <i>\n    '), j = {}, k = {}, 
    i = c["if"].call(b, "icon", {
        hash: {},
        inverse: o.noop,
        fn: o.program(1, f, e),
        contexts: [ b ],
        types: [ "ID" ],
        hashContexts: k,
        hashTypes: j,
        data: e
    }), (i || 0 === i) && e.buffer.push(i), e.buffer.push("\n\n    "), j = {}, k = {}, 
    e.buffer.push(n(c._triageMustache.call(b, "label", {
        hash: {},
        contexts: [ b ],
        types: [ "ID" ],
        hashContexts: k,
        hashTypes: j,
        data: e
    }))), e.buffer.push("\n\n    "), j = {}, k = {}, i = c["if"].call(b, "trailingIcon", {
        hash: {},
        inverse: o.noop,
        fn: o.program(3, g, e),
        contexts: [ b ],
        types: [ "ID" ],
        hashContexts: k,
        hashTypes: j,
        data: e
    }), (i || 0 === i) && e.buffer.push(i), e.buffer.push("\n  </i>\n\n  "), j = {}, 
    k = {}, i = c["if"].call(b, "loading", {
        hash: {},
        inverse: o.noop,
        fn: o.program(5, h, e),
        contexts: [ b ],
        types: [ "ID" ],
        hashContexts: k,
        hashTypes: j,
        data: e
    }), (i || 0 === i) && e.buffer.push(i), e.buffer.push("\n</div>\n"), l;
}), this.Ember.TEMPLATES["components/eui-dropbutton"] = Ember.Handlebars.template(function(a, b, c, d, e) {
    function f(a, b) {
        var d, e, f, g, h = "";
        return b.buffer.push("\n  "), e = {
            label: a,
            type: a,
            size: a,
            icon: a,
            loading: a,
            disabled: a,
            "class": a,
            action: a
        }, f = {
            label: "ID",
            type: "ID",
            size: "ID",
            icon: "ID",
            loading: "ID",
            disabled: "ID",
            "class": "STRING",
            action: "STRING"
        }, g = {
            hash: {
                label: "primaryAction.label",
                type: "view.type",
                size: "view.size",
                icon: "view.icon",
                loading: "view.loading",
                disabled: "view.disabled",
                "class": "eui-primaryaction",
                action: "primaryAction"
            },
            contexts: [],
            types: [],
            hashContexts: e,
            hashTypes: f,
            data: b
        }, b.buffer.push(m((d = c["eui-button"] || a["eui-button"], d ? d.call(a, g) : l.call(a, "eui-button", g)))), 
        b.buffer.push("\n\n  "), e = {
            type: a,
            size: a,
            icon: a,
            loading: a,
            disabled: a,
            "class": a,
            action: a
        }, f = {
            type: "ID",
            size: "ID",
            icon: "STRING",
            loading: "BOOLEAN",
            disabled: "ID",
            "class": "STRING",
            action: "STRING"
        }, g = {
            hash: {
                type: "view.type",
                size: "view.size",
                icon: "fa fa-caret-down",
                loading: !1,
                disabled: "view.disabled",
                "class": "eui-trigger",
                action: "toggleWindow"
            },
            contexts: [],
            types: [],
            hashContexts: e,
            hashTypes: f,
            data: b
        }, b.buffer.push(m((d = c["eui-button"] || a["eui-button"], d ? d.call(a, g) : l.call(a, "eui-button", g)))), 
        b.buffer.push("\n\n"), h;
    }
    function g(a, b) {
        var d, e, f, g, h = "";
        return b.buffer.push("\n  "), e = {
            label: a,
            type: a,
            size: a,
            icon: a,
            trailingIcon: a,
            loading: a,
            disabled: a,
            action: a
        }, f = {
            label: "ID",
            type: "ID",
            size: "ID",
            icon: "ID",
            trailingIcon: "STRING",
            loading: "ID",
            disabled: "ID",
            action: "STRING"
        }, g = {
            hash: {
                label: "view.label",
                type: "view.type",
                size: "view.size",
                icon: "view.icon",
                trailingIcon: "fa fa-caret-down",
                loading: "view.loading",
                disabled: "view.disabled",
                action: "toggleWindow"
            },
            contexts: [],
            types: [],
            hashContexts: e,
            hashTypes: f,
            data: b
        }, b.buffer.push(m((d = c["eui-button"] || a["eui-button"], d ? d.call(a, g) : l.call(a, "eui-button", g)))), 
        b.buffer.push("\n\n"), h;
    }
    this.compilerInfo = [ 4, ">= 1.0.0" ], c = this.merge(c, Ember.Handlebars.helpers), 
    e = e || {};
    var h, i, j, k = "", l = c.helperMissing, m = this.escapeExpression, n = this;
    return i = {}, j = {}, h = c["if"].call(b, "primaryAction", {
        hash: {},
        inverse: n.program(3, g, e),
        fn: n.program(1, f, e),
        contexts: [ b ],
        types: [ "ID" ],
        hashContexts: j,
        hashTypes: i,
        data: e
    }), (h || 0 === h) && e.buffer.push(h), e.buffer.push("\n"), k;
});