/*! emberui 2013-10-28 12:0:12 */
EmberUI = Ember.Namespace.create(), EmberUI.Register = Ember.Mixin.create({
    setupComponents: function() {
        this.EuiButtonComponent = EmberUI.EuiButtonComponent;
    }.on("init")
}), EmberUI.EuiButtonComponent = Ember.Component.extend({
    tagName: "button",
    classNameBindings: [ ":eui-button", "computedSize", "computedType", "loading:eui-loading", "icon:eui-icon" ],
    attributeBindings: [ "isDisabled:disabled" ],
    computedSize: function() {
        return "eui-" + (this.get("size") || "medium");
    }.property("size"),
    computedType: function() {
        return "eui-" + (this.get("type") || "secondary");
    }.property("type"),
    isDisabled: function() {
        return this.get("disabled") || this.get("loading") ? !0 : void 0;
    }.property("disabled", "loading")
}), this.Ember = this.Ember || {}, this.Ember.TEMPLATES = this.Ember.TEMPLATES || {}, 
this.Ember.TEMPLATES["components/eui-button"] = Ember.Handlebars.template(function(a, b, c, d, e) {
    function f(a, b) {
        var d, e, f, g, h = "";
        return b.buffer.push("\n      <b "), e = {
            "class": a
        }, f = {
            "class": "STRING"
        }, g = {
            hash: {
                "class": "icon title::eui-no-title"
            },
            contexts: [],
            types: [],
            hashContexts: e,
            hashTypes: f,
            data: b
        }, b.buffer.push(m((d = c["bind-attr"] || a["bind-attr"], d ? d.call(a, g) : l.call(a, "bind-attr", g)))), 
        b.buffer.push("></b>\n    "), h;
    }
    function g(a, b) {
        b.buffer.push('\n    <ul class="eui-loading-animation">\n      <li></li>\n      <li></li>\n      <li></li>\n    </ul>\n  ');
    }
    this.compilerInfo = [ 4, ">= 1.0.0" ], c = this.merge(c, Ember.Handlebars.helpers), 
    e = e || {};
    var h, i, j, k = "", l = c.helperMissing, m = this.escapeExpression, n = this;
    return e.buffer.push('<div class="eui-wrapper">\n  <i>\n    '), i = {}, j = {}, 
    h = c["if"].call(b, "icon", {
        hash: {},
        inverse: n.noop,
        fn: n.program(1, f, e),
        contexts: [ b ],
        types: [ "ID" ],
        hashContexts: j,
        hashTypes: i,
        data: e
    }), (h || 0 === h) && e.buffer.push(h), e.buffer.push("\n\n    "), i = {}, j = {}, 
    e.buffer.push(m(c._triageMustache.call(b, "title", {
        hash: {},
        contexts: [ b ],
        types: [ "ID" ],
        hashContexts: j,
        hashTypes: i,
        data: e
    }))), e.buffer.push("\n  </i>\n\n  "), i = {}, j = {}, h = c["if"].call(b, "loading", {
        hash: {},
        inverse: n.noop,
        fn: n.program(3, g, e),
        contexts: [ b ],
        types: [ "ID" ],
        hashContexts: j,
        hashTypes: i,
        data: e
    }), (h || 0 === h) && e.buffer.push(h), e.buffer.push("\n</div>\n"), k;
});