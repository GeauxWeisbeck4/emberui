<h1>Theming</h1>

<div class="intro">
  Extend upon the existing aesthetic style or replace it completely with a custom theme.
</div>

<h2>Extending the default theme</h2>

<p>
  Every component has a style attribute. For concise css scoping, this value is prefixed with <em>eui-</em> and added as a class to the main container element of the component.
</p>
<p>
  For example, the button component has two supported style attributes: <em>default</em> and <em>primary</em>. If you specify the <em>primary</em> style then the final markup for the button, ignoring metamorph tags, would look something like this:
</p>

<pre>\{{eui-button label="Save Changes" style="primary"}}</pre>

<pre>&lt;button class="eui-button eui-primary eui-medium">
  &lt;div class="eui-wrapper">
    &lt;i>
      Save Changes
    &lt;/i>
  &lt;/div>
&lt;/button></pre>

<p>However, you can specify any value you like and it will be set as the class prefixed with <em>eui-</em>. If you do not supply a style paramater then the default class will automatically be added.
</p>
<p>
  The same logic applies for the size paramater as well. By default <em>tiny</em>, <em>small</em>, <em>medium</em> (default value), and <em>large</em> are supported. However, if you wanted to add a <em>gigantic</em> size simply specify it:
</p>

<pre>\{{eui-button label="Save Changes" size="gigantic"}}</pre>

<pre>&lt;button class="eui-button eui-default eui-gigantic">
  &lt;div class="eui-wrapper">
    &lt;i>
      Save Changes
    &lt;/i>
  &lt;/div>
&lt;/button></pre>

<p>
  Then add the relevant css classes to support the new size to your theme file. Your css would look something like this:
</p>

<pre> .eui-button.eui-gigantic {
  border-radius: 7px;
  padding: 1px;

  .eui-wrapper {
    height: 70px;
    line-height: 70px;
    padding: 0 30px;
    min-width: 5px;

    &.eui-no-label .eui-wrapper {
      padding: 0 20px;
    }
  }
}</pre>

<p>
  You should scope your sizes to the component type to avoid style interference. Creating additional styles can be quite involved if you want to suppose the full range of features, but it will pay off in the long run.
</p>

<h2>Creating a new theme</h2>

<p>
  To facilitate creating a completely different theme the css for EmberUI has been split into a base and theme file set. The base set is restricted to only the css necessary to support the feature set and provide an easy starting point for styling a new theme.
</p>
<p>
  The default theme set contains some very complex styles to support its visual aesthetic. If you plan to create a lot of custom styles it may be easier to delete the default theme and create your own.
</p>
