<h1>\{{eui-textarea}}</h1>

<div class="intro">
  A reimplementation of the standard browser textarea with added support for validation and error handling.
</div>

<h2>Parameters</h2>

<ul class="parameterindex">
  <li class="header">Attributes</li>
  <li><a href="#section-placeholder">placeholder</a></li>
  <li><a href="#section-value">value</a></li>

  <li class="header">Aesthetic</li>
  <li><a href="#section-style">style</a></li>
  <li><a href="#section-size">size</a></li>
  <li><a href="#section-width">width</a></li>
  <li><a href="#section-height">height</a></li>

  <li class="header">States</li>
  <li><a href="#section-disabled">disabled</a></li>

  <li class="header">Error Handling</li>
  <li><a href="#section-hasError">hasError</a></li>
  <li><a href="#section-required">required</a></li>
</ul>


<h4 id="section-placeholder">placeholder <span>string</span></h4>
<p>
  Placeholder value for the textarea. Does not make use of the placeholder attribute, but instead reimplements the behaviour in html.
</p>

<pre>\{{eui-textarea placeholder='Message'}}</pre>

<div class="output">
  {{eui-textarea placeholder='Message'}}
</div>


<h4 id="section-value">value <span>string</span></h4>
<p>
  The value of the textarea.
</p>

<pre>\{{eui-textarea value='Hey John'}}</pre>

<div class="output">
  {{eui-textarea value='Hey John'}}
</div>


<h4 id="section-style">style <span>string</span></h4>
<p>
  Aesthetic style of the textarea.
</p>

<h5>Values</h5>
<ul class="defaults">
  <li>default (default)</li>
</ul>


<h4 id="section-size">size <span>string</span></h4>
<p>
  Controls the overall size of the textarea. Width is set via the width parameter.
</p>

<h5>Values</h5>
<ul class="defaults">
  <li>tiny</li>
  <li>small</li>
  <li>medium (default)</li>
  <li>large</li>
</ul>
<p>
  Additional sizes can be added via CSS. See {{link-to "Styles &amp; Theming" "documentation.stylesandtheming"}}
</p>

<pre>\{{eui-textarea size='tiny'}}
\{{eui-textarea size='small'}}
\{{eui-textarea size='medium'}}
\{{eui-textarea size='large'}}</pre>

<div class="output">
  {{eui-textarea size='tiny'}}
  {{eui-textarea size='small'}}
  {{eui-textarea size='medium'}}
  {{eui-textarea size='large'}}
</div>


<h4 id="section-width">width <span>string</span></h4>
<p>
  Width of the textarea. You must pass in a CSS size value with the unit. Textarea uses the CSS box-sizing to ensure precentage based sizes are actual sizes.
</p>

<pre>\{{eui-textarea width='150px' placeholder='150px'}}
\{{eui-textarea width='15em' placeholder='15em'}}
\{{eui-textarea width='30%' placeholder='30%'}}</pre>

<div class="output">
  {{eui-textarea width='150px' placeholder='150px'}}
  {{eui-textarea width='15em' placeholder='15em'}}
  {{eui-textarea width='30%' placeholder='30%'}}
</div>


<h4 id="section-height">height <span>string</span></h4>
<p>
  Height of the textarea. You must pass in a CSS size value with the unit. Textarea uses the CSS box-sizing to ensure precentage based sizes are actual sizes.
</p>

<pre>\{{eui-textarea height='50px' placeholder='50px'}}
\{{eui-textarea height='5em' placeholder='5em'}}</pre>

<div class="output">
  {{eui-textarea height='50px' placeholder='50px'}}
  {{eui-textarea height='5em' placeholder='5em'}}
</div>


<h4 id="section-disabled">disabled <span>boolean</span></h4>
<p>
  Disables the textarea.
</p>

<pre>\{{eui-textarea placeholder='Message' disabled=true}}
\{{eui-textarea value='Hey John' disabled=true}}</pre>

<div class="output">
  {{eui-textarea placeholder='Message' disabled=true}}
  {{eui-textarea value='Hey John' disabled=true}}
</div>


<h4 id="section-haserror">hasError <span>boolean | string</span></h4>
<p>
  Responsible for validation and error handling. The logic behind when the error state gets updated has a bit of logic behind it.
</p>
<ul>
  <li>
    Page load
    <ul>
      <li>Textarea has a value: update error state</li>
      <li>Textarea has no value: don't put intput into an error state</li>
    </ul>
  </li>
  <li>
    Textarea value change
    <ul>
      <li>Not in an error state: don't do anything</li>
      <li>In an error state: Update error state on each change</li>
    </ul>
  </li>
  <li>
    Textarea looses focus
    <ul>
      <li>Update error state</li>
    </ul>
  </li>
</ul>

<p>
  The Textarea is in an error state when it is highlighted in red. To enter the error state simply return true for <em>hasError</em>. Remember, if the Textarea has no value then <em>hasError</em> will not be evaluated on page load.
</p>

<pre>\{{eui-Textarea value='Hey' hasError=true}}</pre>

<div class="output">
  {{eui-Textarea value='Hey' hasError=true}}
</div>

<p>
  You can also return a string instead of a boolean value in order to show an error message.
</p>

<pre>\{{eui-textarea value='Hey' hasError="A message can't be that short"}}</pre>

<div class="output">
  {{eui-textarea value='Hey' hasError="A message can't be that short"}}
</div>

<p>
  Both of these examples used a hardcoded value so the error state cannot change. If we instead make use of Ember's data bindings we can create a textarea that checks its error state dynamically.
</p>

<pre>\{{eui-textarea value=message hasError=validateMessage}}</pre>

<pre>message: 'Hey',

validateMessage: function() {
  var messageLength = this.get('message.length');

  if (messageLength > 10 ) {
    return false;
  } else {
    return 'A message can\'t be that short';
  }
}.property('message')</pre>

<div class="output">
  {{eui-textarea value=message hasError=validateMessage}}
</div>

<br />

<p>
  You can use a validation library such as <a href="https://github.com/dockyard/ember-validations">Ember Validations</a> in conjunction with <em>hasError</em> for succinct error handeling.
</p>


<h4 id="section-required">required <span>boolean</span></h4>
<p>
  If set to true the textarea requires a value or it will throw an error when it looses focus.
</p>
