<h1>poplist</h1>

<div class="intro">
  A fixed positioned popup window that presents a list of choices to the user with keyboard and search support.
</div>

<p>
  This component is created programatically and can be done by calling the <em>show()</em> method on the component. The  <em>select</em> and <em>dropbutton</em> components makes use of the <em>poplist</em>.
</p>

<pre>import poplistComponent from 'appkit/components/eui-poplist'

poplistComponent.show({
  targetObject: this
  options: this.get('options'),
  labelPath: 'label',
  style: 'bubble'
});</pre>

<p>
  The poplist is created on the body element and positioned using fixed positioning. It is sized and positioned according to the window frame. Because of this positioning you can safely use this poplist inside elements with <em>overflow: auto;</em> without it getting cut off or causing the element to scroll.
</p>
<p>
  The poplist automatically closes when the window is scrolled, but will prevent the page from scrolling while the cursor is hovered over it.
</p>

<p>
  The poplist features full keyboard navigation including search. Just start typing while it is open to filter the option list.
</p>


<h2>Parameters</h2>

<ul class="parameterindex">
  <li class="header">Required</li>
  <li><a href="#section-targetobject">targetObject</a></li>

  <li class="header">Aesthetic</li>
  <li><a href="#section-style">style</a></li>

  <li class="header">States</li>
  <li><a href="#section-isopen">isOpen</a></li>

  <li class="header">Attributes</li>
  <li><a href="#section-options">options</a></li>
  <li><a href="#section-selection">selection</a></li>
  <li><a href="#section-labelPath">labelPath</a></li>
</ul>


<h4 id="section-targetobject">targetObject <span>object</span></h4>
<p>
  Required property. Set it equal to <em>this</em>
</p>


<h4 id="section-isopen">style <span>string</span></h4>
<p>
  The aesthetic style of the poplist.
</p>

<h5>Values</h5>
<ul class="defaults">
  <li>bubble</li>
  <li>flyin</li>
</ul>
<p>
  Additional styles can be added via CSS. See {{link-to "Theming" "documentation.theming"}}
</p>


<h4 id="section-isopen">isOpen <span>boolean</span></h4>
<p>
  Passes back knowledge of whether the poplist is open. This allows you to create, for example, a button that is styled differently while the poplist is open. It also allows you to prevent the poplist from being opened while it is already open.
</p>

<pre>import poplistComponent from 'appkit/components/eui-poplist'

if (!this.get('poplistIsOpen')) {
  poplistComponent.show({
    targetObject: this,
    isOpenBinding: 'parent.poplistIsOpen',
    options: this.get('options'),
    style: 'bubble'
  });
}</pre>


<h4 id="section-options">options <span>array</span></h4>
<p>
  Pass in an array of options for the user to select from.
</p>

<pre>countries: [
  { label: 'Canada', value: 1 }
  { label: 'United Sates', value: 2 }
  { label: 'Mexico', value: 3 }
]</pre>

<pre>users: [
  Ember.Object.create({
    name: 'John',
    email: 'john@gmail.com',
    value: '1'
  }), Ember.Object.create({
    name: 'Mark',
    email: 'mark@gmail.com',
    value: '2'
  }), Ember.Object.create({
    name: 'Richard',
    email: 'richard@gmail.com',
    value: '3'
  })
]</pre>

<p>
  You also will need to specify the path to the label via the <em>labelPath</em>.
</p>


<h4 id="section-selection">selection <span>object</span></h4>
<p>
  The current option selected.
</p>


<h4 id="section-labelpath">labelPath <span>string</span></h4>
<p>
  Path to the field you want to use as the label for each of the <em>options</em>. Default path is 'label'.
</p>
